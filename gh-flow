#!/usr/bin/env bash
set -e

VERSION="0.2.0"

version() {
  echo $VERSION
}

help() {
  cat <<EOF
VERSION: ${VERSION}
USAGE:
  gh flow init                             Will create a new develop branch based on the main branch.

  gh flow feature start <FEATURE NAME>     Start working on a new feature. Will create a new branch called feature/<FEATURE NAME>.
  gh flow feature publish <FEATURE NAME>   Will create a new Pull Request based on the feature branch with the label "feature".
  gh flow feature merge <FEATURE NAME>     Will pull the latest develop branch and start a merge with develop.
  gh flow feature finish <FEATURE NAME>    Will mark the Pull Request with a "ready for review" label.

  gh flow [bug|hotfix] start <BUG NAME>    Start working on a new bug. Will create a new branch called bug/<BUG NAME>.
  gh flow [bug|hotfix] publish <BUG NAME>  Will create a new Pull Request based on the feature branch with the label "bug".
  gh flow [bug|hotfix] merge <BUG NAME>     Will pull the latest develop branch and start a merge with develop.
  gh flow [bug|hotfix] finish <BUG NAME>   Will mark the Pull Request with a "ready for review" label.

  gh flow support start <SUPPORT NAME>     Start working on a new support case. Will create a new branch called support/<SUPPORT NAME>.
  gh flow support publish <SUPPORT NAME>   Will create a new Pull Request based on the support branch with the label "support".
  gh flow support merge <SUPPORT NAME>     Will pull the latest develop branch and start a merge with develop.
  gh flow support finish <SUPPORT NAME>    Will mark the Pull Request with a "ready for review" label.

  gh flow release start <RELEASE NAME>     Start working on a new release. Will create a new branch called release/<RELEASE NAME>.
  gh flow release publish <RELEASE NAME>   Will create a new Pull Request based on the release branch with the label "release".
  gh flow release merge <RELEASE NAME>     Will pull the latest main branch and start a merge with main.
  gh flow release finish <RELEASE NAME>    Will checkout the main branch that includess the release, tag the release, and create a new release based on the tag.
EOF
}

flow_init() {
  git checkout main
  git pull
  git checkout -b develop
  git push -u origin develop
}

flow_feature_start() {
  git checkout develop && git pull
  git checkout -b feature/$1
  git push -u origin feature/$1
}

flow_feature_publish() {
  gh pr create \
  --base develop \
  --head feature/$1 \
  --assignee "@me" \
  --label "feature" \
  --draft
}

flow_feature_merge() {
  git checkout develop && git pull
  git checkout feature/$1
  git merge develop
}

flow_feature_finish() {
  gh pr ready feature/$1
  gh pr edit feature/$1 --add-label "ready for review"
}

flow_hotfix_start() {
  git checkout develop && git pull
  git checkout -b bug/$1
  git push -u origin bug/$1
}

flow_hotfix_publish() {
  gh pr create \
  --base develop \
  --head bug/$1 \
  --assignee "@me" \
  --label "bug" \
  --draft
}

flow_hotfix_merge() {
  git checkout develop && git pull
  git checkout bug/$1
  git merge develop
}

flow_hotfix_finish() {
  gh pr ready bug/$1
  gh pr edit bug/$1 --add-label "ready for review"
}

flow_support_start() {
  git checkout develop && git pull
  git checkout -b support/$1
  git push -u origin support/$1
}

flow_support_publish() {
  gh pr create \
  --base develop \
  --head support/$1 \
  --assignee "@me" \
  --label "support" \
  --draft
}

flow_support_merge() {
  git checkout develop && git pull
  git checkout support/$1
  git merge develop
}

flow_support_finish() {
  gh pr ready support/$1
  gh pr edit support/$1 --add-label "ready for review"
}

flow_release_start() {
  git checkout develop && git pull
  git checkout -b release/$1
  git push -u origin release/$1
}

flow_release_publish() {
  gh pr create \
  --base develop \
  --head release/$1 \
  --assignee "@me" \
  --label "release"

  gh pr create \
  --base main \
  --head release/$1 \
  --assignee "@me" \
  --label "release"
}

flow_release_merge() {
  git checkout main && git pull
  git checkout release/$1
  git merge main
}

flow_release_finish() {
  git checkout main && git pull
  git tag -a $1
  git push origin --tags
  gh release create $1
}

if [ $1 = "feature" ]; then

  if [ $2 = "start" ]; then
    flow_feature_start $3
    exit 0
  elif [ $2 = "publish" ]; then
    flow_feature_publish $3
    exit 0
  elif [ $2 = "merge" ]; then
    flow_feature_merge $3
    exit 0
  elif [ $2 = "finish" ]; then
    flow_feature_finish $3
    exit 0
  else
    help
    exit 1
  fi

elif [ $1 == "hotfix" ] || [ $1 == "bug" ]; then

  if [ $2 = "start" ]; then
    flow_hotfix_start $3
    exit 0
  elif [ $2 = "publish" ]; then
    flow_hotfix_publish $3
    exit 0
  elif [ $2 = "merge" ]; then
    flow_hotfix_merge $3
    exit 0
  elif [ $2 = "finish" ]; then
    flow_hotfix_finish $3
    exit 0
  else
    help
    exit 1
  fi

elif [ $1 == "support" ]; then

  if [ $2 = "start" ]; then
    flow_support_start $3
    exit 0
  elif [ $2 = "publish" ]; then
    flow_support_publish $3
    exit 0
  elif [ $2 = "merge" ]; then
    flow_support_merge $3
    exit 0
  elif [ $2 = "finish" ]; then
    flow_support_finish $3
    exit 0
  else
    help
    exit 1
  fi

elif [ $1 == "release" ] ;then

  if [ $2 = "start" ]; then
    flow_release_start $3
    exit 0
  elif [ $2 = "publish" ]; then
    flow_release_publish $3
    exit 0
  elif [ $2 = "merge" ]; then
    flow_release_merge $3
    exit 0
  elif [ $2 = "finish" ]; then
    flow_release_finish $3
    exit 0
  else
    help
    exit 1
  fi

elif [ $1 == "help" ] ;then
  help
  exit 0
else
  help
  exit 1
fi
